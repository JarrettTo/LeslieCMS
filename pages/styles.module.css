@font-face {
  font-family: 'Replica Pro';
  src: url('/public/fonts/ReplicaPro.ttf') format('ttf');
   
  font-weight: normal;
  font-style: normal;
  /* Add other font styles if available */
}
.gridContainer {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  padding: 10px;
  justify-content: center;
}
.textContainer{
  display: inline-flex; /* changed to inline-flex */
  flex-direction: column;
}

.elementContainer {
  display: grid; /* Use grid to match child widths */
  grid-template-columns: 1fr; /* One column grid */
  gap: 10px; /* Spacing between grid items */
}

.gridItem {
  display: inline-flex; /* changed to inline-flex */
  flex-direction: column;
  align-items: center;
  text-align: center;
  margin-bottom: 20px;
}

.imageWrapper {
  display: inline-block; /* Shrink to fit the content */
  line-height: 0; /* Remove space below images */
}

.gridItem img {
  height: 18vh;
  width: auto; /* Adjust width to maintain aspect ratio */
  object-fit: contain;
  display: block; /* Display block to fill the width of its container */
}

.gridItemName {
  max-width: 100%;
  overflow: hidden;
  font-size: 12px;
  text-overflow: ellipsis;
  font-weight:600;
  white-space: nowrap;
  font-family: 'Replica Pro', monospace;
}

.name {
  margin: 2%;
  padding-top: 30%;
  font-size: 20px;
  font-weight:600;
  white-space: nowrap;
  font-family: 'Replica Pro', monospace; /* Add this line */
}
.gridItemDate {
  max-width: 100%;
  overflow: hidden;
  font-size: 10px;
  text-overflow: ellipsis;
  font-weight:normal;
  white-space: nowrap;
  font-family: 'Replica Pro', monospace; /* Add this line */
}
.gridItem video {
  height: 18vh;
  object-fit: contain;
  width: auto; /* Adjust width to maintain aspect ratio */
  display: block; /* Removes extra space beneath the content */
  margin: 0 auto; /* Centers the content horizontally */
}

.playButton {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.gridItem:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.react-image-lightbox-overlay {
  background-color: rgba(0, 0, 0, 0.8) !important; /* Dimmed background */
}

/* Customize the size and position of the lightbox */
.react-image-lightbox-content {
  width: 80vw !important; /* Width as a percentage of the viewport width */
  height: 80vh !important; /* Height as a percentage of the viewport height */
  top: 10vh !important; /* Position from the top */
  left: 10vw !important; /* Position from the left */
}

/* Ensure that image fits nicely within the lightbox */
.react-image-lightbox-image {
  max-width: 100%;
  max-height: 100%;
}
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.fadeOut {
  animation: fadeOut 0.3s forwards;
}

@keyframes fadeOut {
  to { opacity: 0; }
}

.lightboxBackdrop {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  animation: fadeIn 0.3s;
}
.mediaContainer {
  /* A max size smaller than the viewport to provide some space around */
  max-width: 80vw;
  max-height: 80vh;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden; /* Add this to prevent spillover */
}

/* Style for the content to maintain its aspect ratio and not necessarily fill the container */
.lightboxContent img,
.lightboxContent video {
  /* Set to 'auto' to maintain the aspect ratio */
  width: auto;
  height: auto;
  /* Ensure it doesn't exceed the media container */
  max-width: 90%;
  max-height: 90%;
  object-fit: contain;
}
.lightboxContent {
  position: relative;
  max-width: 70vw;
  max-height: 70vh;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}



/* Navigation buttons */
.lightboxButton {
  border: 2px solid white; /* Solid border for premium look */
  background-color: rgba(50, 50, 50, 0.8); /* Slightly darker background for contrast */
  color: white;
  font-size: 30px; /* Larger font for clarity */
  width: 50px; /* Fixed width and height for a uniform circle */
  height: 50px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute; /* Position the buttons absolutely within the backdrop */
  z-index: 1010; /* Above the lightbox content */
}

.lightboxButton.prev,
.lightboxButton.next {
  /* ... existing styles ... */
  top: 50%; /* Center vertically */
  transform: translateY(-50%); /* Adjust vertical alignment */
}

.lightboxButton.prev {
  left: 20px; /* Space from the left edge */
}

.lightboxButton.next {
  right: 20px; /* Space from the right edge */
}


/* Close button positioned at the top-right corner of the viewport */
.lightboxButton.close {
  top: 20px; /* Slightly lower from the top for accessibility */
  right: 20px;
}

/* Add a fade-out animation to the close function */
.closeLightbox {
  animation: fadeOut 0.3s forwards; /* The 'forwards' value will retain the last keyframe state after the animation completes */
}
.lightboxOpening {
  animation: fadeIn 0.3s;
}

/* Animation only when closing */
.lightboxClosing {
  animation: fadeOut 0.3s forwards;
}